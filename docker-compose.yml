services:
  traefik:
    image: traefik:v3.1
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      #- "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.email=your-email@example.com"
      #- "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      #- "letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      #- "./traefik.yml:/etc/traefik/traefik.yml"
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    labels:
      - "traefik.http.routers.frontend.rule=Host(`waypoint.docker.localhost`)"
      #- "traefik.http.routers.frontend.entrypoints=websecure"
      #- "traefik.http.routers.frontend.tls.certresolver=myresolver"
    environment:
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    profiles:
      - production

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    # volumes:
    #   - ./frontend:/frontend
    #   - /frontend/node_modules # Avoid overwriting node_modules
    labels:
      - "traefik.http.routers.frontend-dev.rule=Host(`waypoint.docker.localhost`)"
      #- "traefik.http.routers.frontend.entrypoints=websecure"
      #- "traefik.http.routers.frontend.tls.certresolver=myresolver"
    environment:
      NODE_ENV: production
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src
          ignore:
            - node_modules/
            - dist/
        - action: rebuild
          path: package.json
    ports:
      - "5173:5173"
    depends_on:
      - backend-dev
    networks:
      - app-network
    profiles:
      - development

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    labels:
      - "traefik.http.routers.backend.rule=Host(`waypoint.docker.localhost`) && PathPrefix(`/api`)" 
      #- "traefik.http.routers.frontend.entrypoints=websecure"
      #- "traefik.http.routers.frontend.tls.certresolver=myresolver"
    environment:
      NODE_ENV: production
    env_file:
      - ./env/backend.env
    # develop:
    #   watch:
    #     - action: rebuild
    #       path: .
    ports:
      - "3001:3001"
    networks:
      - app-network
    profiles:
      - production

  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    labels:
      - "traefik.http.routers.backend-dev.rule=Host(`waypoint.docker.localhost`) && PathPrefix(`/api`)" 
      #- "traefik.http.routers.frontend.entrypoints=websecure"
      #- "traefik.http.routers.frontend.tls.certresolver=myresolver"
    environment:
      NODE_ENV: development
    env_file:
      - ./env/backend.env
    develop:
      watch:
        - action: sync
          path: ./backend/src
          target: /app/src
          ignore:
            - node_modules/
            - build/
    ports:
      - "3001:3001"
    networks:
      - app-network
    profiles:
      - development

  mongodb:
    image: mongo:7
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./db/init-db.js:/docker-entrypoint-initdb.d/init.js:ro
      - ./db/dbExample.js:/docker-entrypoint-initdb.d/init_data.js:ro
    restart: unless-stopped
    env_file:
      - ./env/db.env
    ports:
      - 27017:27017
    networks:
      - app-network

networks:
  app-network:
    external: false

volumes:
  #letsencrypt: {}
  mongo-data: {}
  mongo-config: {}
